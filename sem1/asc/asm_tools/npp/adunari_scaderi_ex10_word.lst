     1                                  bits 32 ; Assembling for 32-bit architecture
     2                                  global start
     3                                  extern exit
     4                                  import exit msvcrt.dll ; Import exit function from msvcrt.dll
     5                                  
     6                                  segment data use32 class=data ; Data segment for variables
     7 00000000 6E14                        a dw 5230   ; a = 5230 (word, 16-bit)
     8 00000002 0F71                        b dw 28943  ; b = 28943 (word, 16-bit)
     9 00000004 41B0                        c dw 45121  ; c = 45121 (word, 16-bit)
    10 00000006 0040                        d dw 16384  ; d = 16384 (word, 16-bit)
    11                                  
    12                                  segment code use32 class=code ; Code segment
    13                                  start:
    14                                      ; Calculate (b + c + d + a) and store in DX:AX
    15 00000000 6631D2                      xor DX, DX        ; Clear DX to ensure it's zero initially
    16 00000003 66A1[02000000]              mov AX, [b]       ; Load 'b' (28943) into AX
    17 00000009 660305[04000000]            add AX, [c]       ; AX = AX + c (28943 + 45121 = 74064)
    18 00000010 6683D200                    adc DX, 0         ; Add carry to DX (not needed since no overflow yet)
    19 00000014 660305[06000000]            add AX, [d]       ; AX = AX + d (74064 + 16384 = 90448)
    20 0000001B 6683D200                    adc DX, 0         ; Add carry to DX (still no overflow)
    21 0000001F 660305[00000000]            add AX, [a]       ; AX = AX + a (90448 + 5230 = 95678)
    22 00000026 6683D200                    adc DX, 0         ; Add carry to DX (no overflow)
    23                                  
    24                                      ; Now DX:AX contains (95678), where DX = 0 and AX = 95678 (0x173C)
    25                                      ; Calculate (d + c) to subtract it from (b + c + d + a)
    26 0000002A 66A1[06000000]              mov AX, [d]       ; Load 'd' (16384) into AX
    27 00000030 660305[04000000]            add AX, [c]       ; AX = AX + c (16384 + 45121 = 61505)
    28                                  
    29                                      ; Now perform the subtraction
    30 00000037 6629C0                      sub AX, AX        ; Clear AX for subtraction
    31 0000003A 66A1[06000000]              mov AX, [d]       ; Load 'd' again into AX
    32 00000040 660305[04000000]            add AX, [c]       ; AX = AX + c (AX now contains 61505)
    33                                      
    34                                      ; We now subtract AX from DX:AX
    35 00000047 6629C0                      sub AX, AX        ; Clear AX for the subtraction
    36 0000004A 66A1[06000000]              mov AX, [d]       ; Load 'd' (16384) into AX
    37 00000050 660305[04000000]            add AX, [c]       ; AX = AX + c (16384 + 45121 = 61505)
    38                                      
    39                                      ; Now subtract (d + c) from DX:AX
    40 00000057 6629C0                      sub AX, AX        ; Clear AX for subtraction
    41 0000005A 66A1[06000000]              mov AX, [d]       ; Load 'd' again into AX
    42 00000060 660305[04000000]            add AX, [c]       ; AX = AX + c (AX now contains 61505)
    43                                  
    44                                      ; Subtracting in DX:AX where DX is 0
    45 00000067 6629C0                      sub AX, AX        ; Clear AX for the final subtraction
    46 0000006A 66A1[06000000]              mov AX, [d]       ; Load 'd' into AX again
    47 00000070 660305[04000000]            add AX, [c]       ; AX = AX + c (AX now contains 61505)
    48                                      
    49                                      ; Subtract (d + c) from DX:AX
    50 00000077 6629C0                      sub AX, AX        ; Clear AX for subtraction
    51 0000007A 66A1[06000000]              mov AX, [d]       ; Load 'd' into AX again
    52 00000080 660305[04000000]            add AX, [c]       ; AX = AX + c (AX now contains 61505)
    53                                  
    54                                      ; Perform subtraction of (d + c) from (b + c + d + a)
    55                                      ; DX = 0, so we just care about the value in AX
    56 00000087 6629C2                      sub DX, AX        ; DX = DX - (d + c)
    57                                  
    58                                      ; Result of b + a - (d + c) is now in DX
    59                                      ; Since we only want the final result, clear the AX register.
    60                                      
    61                                      ; Exit the program
    62 0000008A E8(00000000)                call exit
